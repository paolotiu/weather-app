{"version":3,"sources":["components/Today.js","components/Header.js","components/Forecast.js","App.js","index.js"],"names":["Today","props","useState","symbol","setSymbol","clouds","rain","sun","wind","snow","clear","thunderstorm","svg","useEffect","unit","weather","main","time","dayNum","year","day","month","temp","feel","description","loading","className","style","opacity","color","src","toLowerCase","alt","stats","humidity","pressure","sunrise","sunset","toLocaleTimeString","hour","minute","Header","country","city","width","onSubmit","getLatLong","ref","search","placeholder","type","Forecast","forecast","map","index","key","Date","dt","toString","split","toLocaleDateString","max","min","geoApiKey","process","days","months","prototype","getMonthName","this","getMonth","getDayName","getDay","App","humidty","setStats","setForecast","setUnit","setLoading","setWeather","location","setLocation","e","a","preventDefault","name","current","value","fetch","res","json","results","components","state","continent","bounds","northeast","lat","lng","long","setLocationName","error","classList","add","setTimeout","remove","then","x","getCurrentLatLong","getCurrentLocation","geo","coords","latitude","longitude","Promise","rej","navigator","geolocation","getCurrentPosition","weatherJson","currentLocationWeather","v","date","feels_like","getUTCDate","getUTCFullYear","daily","useRef","boxShadow","offColor","onColor","uncheckedIcon","checkedIcon","onChange","checked","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.422d4af2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './css/Today.css'\r\nconst Today = (props) => {\r\n    const [symbol, setSymbol] = useState()\r\n\r\n    const [svg, setSvg] = useState({\r\n        clouds:\r\n            'https://www.flaticon.com/svg/static/icons/svg/3571/3571294.svg',\r\n        rain: 'https://www.flaticon.com/svg/static/icons/svg/3313/3313996.svg',\r\n        sun: 'https://www.flaticon.com/svg/static/icons/svg/979/979585.svg',\r\n        wind: 'https://www.flaticon.com/svg/static/icons/svg/777/777597.svg',\r\n        snow: 'https://www.flaticon.com/svg/static/icons/svg/777/777629.svg',\r\n        clear: 'https://www.flaticon.com/svg/static/icons/svg/979/979585.svg',\r\n        thunderstorm:\r\n            'https://www.flaticon.com/svg/static/icons/svg/3026/3026371.svg',\r\n    })\r\n\r\n    useEffect(() => {\r\n        setSymbol(props.unit === 'metric' ? '°C' : '°F')\r\n    }, [props.unit])\r\n\r\n    if (props.weather) {\r\n        //destructure props\r\n        let {\r\n            main,\r\n            time,\r\n            dayNum,\r\n            year,\r\n            day,\r\n            month,\r\n            temp,\r\n            feel,\r\n            description,\r\n        } = props.weather\r\n        let loading = props.loading\r\n\r\n        return (\r\n            <div className=\"today-container\">\r\n                {loading ? (\r\n                    <p>loading ...</p>\r\n                ) : (\r\n                    <>\r\n                        <h3 style={{ opacity: '0.6', color: ' #6FCF97' }}>\r\n                            Today\r\n                        </h3>\r\n                        <p className=\"today-day\">\r\n                            {day} | {month} {dayNum}, {year} | {time}\r\n                        </p>\r\n                        <hr />\r\n                        <p className=\"today-description\">\r\n                            {description} &nbsp;{' '}\r\n                            <img\r\n                                className=\"svg\"\r\n                                src={main ? svg[main.toLowerCase()] : null}\r\n                                alt=\"\"\r\n                            />\r\n                        </p>\r\n\r\n                        <p className=\"today-temp\">\r\n                            Temp: {temp} {symbol}\r\n                        </p>\r\n                        <p className=\"today-feel\">\r\n                            Feels Like: {feel} {symbol}{' '}\r\n                        </p>\r\n                    </>\r\n                )}\r\n            </div>\r\n        )\r\n    } else if (props.stats) {\r\n        const { humidity, pressure, sunrise, sunset } = props.stats\r\n        return (\r\n            <div className=\"today-container\">\r\n                <h3 style={{ opacity: '0.6', color: ' #6FCF97' }}>Stats</h3>\r\n                <hr />\r\n                <p>Humidity: {humidity}%</p>\r\n                <p>Pressure: {pressure} hPa</p>\r\n                <p>\r\n                    Sunrise:{' '}\r\n                    {sunrise\r\n                        ? sunrise.toLocaleTimeString([], {\r\n                              hour: '2-digit',\r\n                              minute: '2-digit',\r\n                          })\r\n                        : null}\r\n                </p>\r\n                <p>\r\n                    Sunset:{' '}\r\n                    {sunset\r\n                        ? sunset.toLocaleTimeString([], {\r\n                              hour: '2-digit',\r\n                              minute: '2-digit',\r\n                          })\r\n                        : null}\r\n                </p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Today\r\n","import React from 'react'\r\nimport './css/Header.css'\r\nconst Header = (props) => {\r\n    return (\r\n        <>\r\n            <header className=\"header\">\r\n                <span className=\"header-location\">\r\n                    {!props.country ? null : <span>{props.country}</span>}\r\n                    {props.city ? <span>, {props.city}</span> : null}\r\n                </span>\r\n\r\n                <span style={{ width: '33%' }}>Weather</span>\r\n                <div className=\"search-form\">\r\n                    <form onSubmit={props.getLatLong}>\r\n                        <input\r\n                            ref={props.search}\r\n                            className=\"search\"\r\n                            placeholder=\"Location...\"\r\n                            type=\"text\"\r\n                        />\r\n                        <button className=\"submit\" type=\"submit\">\r\n                            <span className=\"material-icons\">search</span>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </header>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/Forecast.css'\r\n\r\nconst Forecast = (props) => {\r\n    const [symbol, setSymbol] = useState()\r\n    useEffect(() => {\r\n        setSymbol(props.unit === 'metric' ? '°C' : '°F')\r\n    }, [props.unit])\r\n\r\n    if (props.forecast) {\r\n        return (\r\n            <div className=\"forecast-container\">\r\n                <h3\r\n                    className=\"title\"\r\n                    style={{ opacity: '0.6', color: ' #6FCF97' }}\r\n                >\r\n                    Forecast\r\n                </h3>\r\n                <hr />\r\n                <div className=\"forecast-days-container\">\r\n                    {props.forecast.map((day, index) => {\r\n                        if (index === 0) {\r\n                            return null\r\n                        }\r\n                        return (\r\n                            <div\r\n                                className=\"day-container\"\r\n                                key={'forecast' + index}\r\n                            >\r\n                                <p className=\"forecast-day\">\r\n                                    {\r\n                                        new Date(day.dt * 1000)\r\n                                            .toString()\r\n                                            .split(' ')[0]\r\n                                    }\r\n                                    , &nbsp;\r\n                                    {new Date(\r\n                                        day.dt * 1000\r\n                                    ).toLocaleDateString()}\r\n                                </p>\r\n                                <p className=\"forecast-temp\">\r\n                                    {' '}\r\n                                    Max: {day.temp.max} {symbol}\r\n                                </p>\r\n                                <p className=\"forecast-temp\">\r\n                                    Min: {day.temp.min} {symbol}\r\n                                </p>\r\n                                <p>Chance of Rain: {day.rain}%</p>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <div className=\"forecast-container\"> Loading...</div>\r\n    }\r\n}\r\n\r\nexport default Forecast\r\n","import React, { useEffect, useState, useRef } from 'react'\nimport Switch from 'react-switch'\nimport './App.css'\nimport Today from './components/Today'\nimport Header from './components/Header'\nimport Forecast from './components/Forecast'\n\nlet geoApiKey = process.env.REACT_APP_GEO_API_KEY\nlet weatherApiKey = process.env.REACT_APP_WEATHER_API_KEY\n// let weatherApiKey = process.env.REACT_APP_WEATHER_API_KEY\n//For date time\n;(function () {\n    var days = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n    ]\n\n    var months = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ]\n\n    Date.prototype.getMonthName = function () {\n        return months[this.getMonth()]\n    }\n    Date.prototype.getDayName = function () {\n        return days[this.getDay()]\n    }\n})()\n\nfunction App() {\n    const [stats, setStats] = useState({\n        humidty: 0,\n    })\n    const [forecast, setForecast] = useState()\n    const [unit, setUnit] = useState('metric')\n    const [loading, setLoading] = useState(true)\n    const [weather, setWeather] = useState({\n        temp: 0,\n        feel: 0,\n        description: '',\n    })\n\n    const [location, setLocation] = useState()\n\n    // Handle Searches\n    async function getLatLong(e) {\n        e.preventDefault()\n        try {\n            const name = search.current.value\n            search.current.value = ''\n            const res = await fetch(\n                `https://api.opencagedata.com/geocode/v1/json?q=${name}&key=${geoApiKey}`\n            )\n            let json = await res.json()\n            let city = json.results[0].components.city\n            let country = json.results[0].components.country\n            let state = json.results[0].components.state\n            if (country === 'United States of America') {\n                country = 'USA'\n            }\n\n            if (city && state && country) {\n                country = state\n            } else if (!city && state) {\n                city = state\n            } else if (!state && !country) {\n                country = json.results[0].components.continent\n            }\n\n            let { lat, lng } = json.results[0].bounds.northeast\n            let long = lng\n            setLoading(true)\n            setLocationName(lat, long, city, country)\n        } catch (e) {\n            error.current.classList.add('show')\n            setTimeout(() => {\n                error.current.classList.remove('show')\n            }, 2000)\n        }\n    }\n\n    //Sets the location state\n    async function setLocationName(lat, long, city = '', country = '') {\n        try {\n            let json = await fetch(\n                `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${long}&key=${geoApiKey}`\n            ).then((x) => x.json())\n\n            if (!country) {\n                city = json.results[0].components.city\n                country = json.results[0].components.country\n            }\n\n            setLocation({ lat, long, city, country })\n        } catch (e) {\n            error.current.classList.add('show')\n            setTimeout(() => {\n                error.current.classList.remove('show')\n            }, 2000)\n        }\n    }\n\n    // gets current lat and long and passes to setLocationName\n    async function getCurrentLatLong() {\n        let geo = await getCurrentLocation()\n\n        let lat = geo.coords.latitude\n        let long = geo.coords.longitude\n        setLocationName(lat, long)\n    }\n    //Get current latitude and longitude, returns a promise\n    function getCurrentLocation() {\n        return new Promise((res, rej) => {\n            navigator.geolocation.getCurrentPosition(res, rej)\n        })\n    }\n\n    useEffect(() => {\n        getCurrentLatLong()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        //call to dark sky api\n        async function currentLocationWeather() {\n            let { lat, long } = location\n            let weather = await fetch(\n                `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=minutely&appid=${weatherApiKey}&units=${unit}`\n            )\n            let weatherJson = await weather.json()\n            return weatherJson\n        }\n\n        if (location) {\n            currentLocationWeather().then((v) => {\n                let date = new Date(v.current.dt * 1000)\n                setWeather({\n                    temp: v.current.temp,\n                    feel: v.current.feels_like,\n                    description: v.current.weather[0].description,\n                    main: v.current.weather[0].main,\n                    day: date.getDayName(),\n                    month: date.getMonthName(),\n                    dayNum: date.getUTCDate(),\n                    year: date.getUTCFullYear(),\n                    time: date.toLocaleTimeString('en-US'),\n                })\n                setStats({\n                    humidity: v.current.humidity,\n                    pressure: v.current.pressure,\n                    sunrise: new Date(v.current.sunrise * 1000),\n                    sunset: new Date(v.current.sunset * 1000),\n                })\n                setForecast(v.daily)\n            })\n\n            setLoading(false)\n        }\n    }, [location, unit])\n\n    let error = useRef()\n    let search = useRef()\n    return (\n        <div className=\"App\">\n            <Header\n                search={search}\n                getLatLong={getLatLong}\n                city={location ? location.city : null}\n                country={location ? location.country : null}\n            />\n\n            <div ref={error} className=\"error-container\">\n                <span className=\"error\">Location Not Found</span>\n            </div>\n            <div className=\"button-container\">\n                <Switch\n                    className=\"switch\"\n                    boxShadow=\"3px 3px 5px #c8c8c8\"\n                    offColor=\"#f2f2f2\"\n                    onColor=\"#f2f2f2\"\n                    uncheckedIcon={<span className=\"switch-icon\">°F</span>}\n                    checkedIcon={<span className=\"switch-icon\">°C</span>}\n                    onChange={() =>\n                        unit === 'metric'\n                            ? setUnit('imperial')\n                            : setUnit('metric')\n                    }\n                    checked={unit === 'metric'}\n                />\n                <button className=\"here\" onClick={getCurrentLatLong}>\n                    <span className=\"material-icons\">location_on</span>\n                </button>\n            </div>\n            <div className=\"content\">\n                <div className=\"container1\">\n                    <Today unit={unit} weather={weather} loading={loading} />\n                    <Today stats={stats} />\n                </div>\n                <div className=\"container2\">\n                    <Forecast forecast={forecast} unit={unit} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}